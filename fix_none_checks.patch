#!/usr/bin/env python3
"""
Add defensive None checks for dictionary access patterns.
This fixes potential AttributeError when val is None.
"""

import os
import re

files_to_check = [
    'electrum/wallet_db.py',
    'electrum/json_db.py', 
    'electrum/storage.py',
    'electrum/invoices.py',
    'electrum/wallet.py'
]

for filepath in files_to_check:
    if not os.path.exists(filepath):
        continue
        
    with open(filepath, 'r') as f:
        lines = f.readlines()
    
    modified = False
    new_lines = []
    
    for i, line in enumerate(lines):
        # Pattern: something = val.get(anything) or ()
        if 'val.get(' in line and ' or ()' in line:
            # Add None check
            indent = len(line) - len(line.lstrip())
            var_match = re.match(r'(\s*)(\w+)\s*=\s*val\.get\((.*?)\)\s*or\s*\(\)', line)
            if var_match:
                new_line = f"{' ' * indent}{var_match.group(2)} = val.get({var_match.group(3)}) or () if val else ()\n"
                new_lines.append(new_line)
                modified = True
                print(f"Fixed line {i+1} in {filepath}")
                continue
        
        # Pattern: something = val.get(anything)
        elif 'val.get(' in line and '=' in line:
            if 'if val' not in line:  # Don't modify if already has check
                var_match = re.match(r'(\s*)(\w+)\s*=\s*val\.get\((.*?)\)', line)
                if var_match:
                    indent = len(line) - len(line.lstrip())
                    new_line = f"{' ' * indent}{var_match.group(2)} = val.get({var_match.group(3)}) if val else None\n"
                    new_lines.append(new_line)
                    modified = True
                    print(f"Fixed line {i+1} in {filepath}")
                    continue
        
        new_lines.append(line)
    
    if modified:
        with open(filepath, 'w') as f:
            f.writelines(new_lines)
        print(f"Updated {filepath}")

print("\nDone! Added None checks where needed.")