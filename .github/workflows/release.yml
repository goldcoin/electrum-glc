name: Build Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 4.5.0)'
        required: true
        type: string

jobs:
  build-windows:
    name: Build Windows Binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Build Windows binaries
        run: |
          cd contrib/build-wine
          ./build.sh
          
      - name: List built files
        run: ls -la contrib/build-wine/dist/
        
      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: electrum-glc-${{ env.VERSION }}-setup.exe
          path: contrib/build-wine/dist/electrum-glc-${{ env.VERSION }}-setup.exe
          if-no-files-found: warn
          
      - name: Upload Windows portable
        uses: actions/upload-artifact@v4
        with:
          name: electrum-glc-${{ env.VERSION }}-portable.exe
          path: contrib/build-wine/dist/electrum-glc-${{ env.VERSION }}-portable.exe
          if-no-files-found: warn
          
      - name: Upload Windows standalone
        uses: actions/upload-artifact@v4
        with:
          name: electrum-glc-${{ env.VERSION }}.exe
          path: contrib/build-wine/dist/electrum-glc-${{ env.VERSION }}.exe
          if-no-files-found: warn

  build-macos:
    name: Build macOS DMG
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          brew install libsecp256k1
          pip install -r contrib/requirements/requirements-build-mac.txt
          
      - name: Build macOS DMG
        run: |
          cd contrib/osx
          ./make_osx.sh
        continue-on-error: true
          
      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: electrum-glc-${{ env.VERSION }}.dmg
          path: contrib/osx/dist/electrum-glc-${{ env.VERSION }}.dmg
          if-no-files-found: warn

  build-linux:
    name: Build Linux AppImage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Build AppImage
        run: |
          cd contrib/build-linux/appimage
          ./build.sh
        continue-on-error: true
          
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: electrum-glc-${{ env.VERSION }}-x86_64.AppImage
          path: contrib/build-linux/appimage/dist/electrum-glc-${{ env.VERSION }}-x86_64.AppImage
          if-no-files-found: warn

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev
          pip install buildozer cython
          
      - name: Build Android APK
        run: |
          cd contrib/android
          ./make_apk.sh
        continue-on-error: true
          
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Electrum-GLC-${{ env.VERSION }}.apk
          path: contrib/android/dist/Electrum-GLC-${{ env.VERSION }}.apk
          if-no-files-found: warn

  build-source:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools
          
      - name: Build source distribution
        run: python -m build --sdist
        
      - name: Build wheel
        run: python -m build --wheel
        
      - name: Upload source distribution
        uses: actions/upload-artifact@v4
        with:
          name: Electrum-GLC-${{ env.VERSION }}.tar.gz
          path: dist/Electrum-GLC-${{ env.VERSION }}.tar.gz
          if-no-files-found: warn
          
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: Electrum_GLC-${{ env.VERSION }}-py3-none-any.whl
          path: dist/Electrum_GLC-${{ env.VERSION }}-py3-none-any.whl
          if-no-files-found: warn

  create-release:
    name: Create GitHub Release
    needs: [build-windows, build-macos, build-linux, build-android, build-source]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/
          
      - name: Create Release Notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          cat > release-notes.md << EOF
          ## Goldcoin Electrum $VERSION
          
          ### ðŸŽ‰ Phase 2 Modernization Complete
          
          This release marks the completion of Phase 2 of the Goldcoin Electrum modernization project.
          
          #### New Features
          - âœ… PyQt6 compatibility layer for future-proof GUI
          - âœ… Enhanced security scanning with bandit and safety
          - âœ… GitHub Actions CI/CD pipeline
          - âœ… Automated dependency updates with Dependabot
          - âœ… Improved developer experience with pre-commit hooks
          
          #### Improvements
          - Python 3.12+ requirement across all platforms
          - Modern code formatting with black and isort
          - Type checking with mypy
          - Comprehensive linting with ruff
          - Security-first development workflow
          
          ### Downloads
          
          #### Windows
          - **Installer:** electrum-glc-$VERSION-setup.exe
          - **Portable:** electrum-glc-$VERSION-portable.exe
          - **Standalone:** electrum-glc-$VERSION.exe
          
          #### macOS
          - **DMG:** electrum-glc-$VERSION.dmg
          
          #### Linux
          - **AppImage:** electrum-glc-$VERSION-x86_64.AppImage
          
          #### Android
          - **APK:** Electrum-GLC-$VERSION.apk
          
          #### Source
          - **Source tarball:** Electrum-GLC-$VERSION.tar.gz
          - **Python wheel:** Electrum_GLC-$VERSION-py3-none-any.whl
          
          ### Verification
          
          All binaries are built using GitHub Actions for transparency and reproducibility.
          
          ### Requirements
          - Python 3.12 or higher
          - PyQt5 5.15.2 or higher (PyQt6 support in progress)
          
          ### What's Next (Phase 3)
          - Complete PyQt6 migration
          - Sphinx documentation generation
          - Enhanced testing infrastructure
          - Performance optimizations
          EOF
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Goldcoin Electrum ${{ env.VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}